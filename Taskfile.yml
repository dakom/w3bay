version: '3'

dotenv: ['.env']

# silent: true

vars:
  # Just to distinguish these relayer paths from other apps
  RELAYER_PATH_PREFIX: "w3bay-demo"

tasks:

  ##### FRONTEND #####

  frontend-dev-local:
    deps: [localmedia-dev, frontend-dev-nomedia-local]

  frontend-dev-testnet:
    deps: [localmedia-dev, frontend-dev-nomedia-testnet]

  frontend-build:
    dir: ./frontend
    env: 
      RUSTFLAGS: --cfg=web_sys_unstable_apis 
    cmds:
      - trunk build --release --public-url=https://dakom.github.io/w3bay/

  frontend-dev-nomedia-local:
    dir: ./frontend
    env: 
      RUSTFLAGS: --cfg=web_sys_unstable_apis
    cmds:
      - trunk serve --features dev,chainlocal --watch . --watch ../packages/shared

  frontend-dev-nomedia-testnet:
    dir: ./frontend
    env: 
      RUSTFLAGS: --cfg=web_sys_unstable_apis
    cmds:
      - trunk serve --features dev --watch . --watch ../packages/shared

  localmedia-dev:
    dir: ./MEDIA/frontend
    cmds: 
      - http-server --gzip --cors -p 9000


  ##### CONTRACT BUILDING / DEPLOYING #####
  contracts-build-native: 
    dir: packages
    cmds:
      - sh ./native-build.sh

  contracts-build-arm:
    dir: packages
    cmds:
      - docker run --rm --tty
        -u "$(id -u)":"$(id -g)"
        -v "{{.USER_WORKING_DIR}}":/code
        -v "{{.USER_WORKING_DIR}}/wasm/target":/target
        -v "{{.USER_WORKING_DIR}}/wasm/artifacts":/code/artifacts
        -v "{{.USER_WORKING_DIR}}/wasm/registry":/usr/local/cargo/registry
        -v "{{.USER_WORKING_DIR}}/wasm/git":/usr/local/cargo/git
        cosmwasm/workspace-optimizer:0.15.0

      # not sure how this was created since we mapped the tool's /code/artifacts
      # but it's empty (the real artifacts are in wasm/artifacts)
      - rm -rf ./artifacts

  contracts-build-arm:
    dir: packages
    cmds:
      - docker run --rm --tty
        -u "$(id -u)":"$(id -g)"
        -v "{{.USER_WORKING_DIR}}":/code
        -v "{{.USER_WORKING_DIR}}/wasm/target":/target
        -v "{{.USER_WORKING_DIR}}/wasm/artifacts":/code/artifacts
        -v "{{.USER_WORKING_DIR}}/wasm/registry":/usr/local/cargo/registry
        -v "{{.USER_WORKING_DIR}}/wasm/git":/usr/local/cargo/git
        cosmwasm/workspace-optimizer-arm64:0.15.0

      # not sure how this was created since we mapped the tool's /code/artifacts
      # but it's empty (the real artifacts are in wasm/artifacts)
      - rm -rf ./artifacts

  contracts-deploy-testnet:
    dir: deployer
    cmds:
      - task: contracts-build-native
      - task: contracts-deploy-built-testnet

  contracts-deploy-local:
    dir: deployer
    cmds:
      - task: contracts-build-native
      - task: contracts-deploy-built-local

  # Just to deploy without building at all
  contracts-deploy-built-testnet:
    dir: deployer
    cmds:
      - npm run deploy-testnet

  contracts-deploy-built-local:
    dir: deployer
    cmds:
      - npm run deploy-local

  ##### RELAYER #####
  # All commands use `-testnet` or `-local`

  relayer-setup-*:
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds: 
      - task: internal-relayer-setup-failable-{{.TARGET}}
      - task: relayer-create-clients-{{.TARGET}}
      - task: relayer-create-connections-{{.TARGET}}
      - task: relayer-create-channels-{{.TARGET}}

  
  internal-relayer-setup-failable-*:
    internal: true
    vars:
      TARGET: "{{index .MATCH 0}}"
    # these setups are allowed to fail as part of the simple relayer-setup command
    # we assume the errors are because this setup part already exists
    ignore_error: true
    cmds: 
      - task: relayer-add-chains-{{.TARGET}}
      - task: relayer-add-wallet-{{.TARGET}}
      - task: relayer-create-paths-{{.TARGET}}

  relayer-add-chains-*:
    vars:
      TARGET: "{{index .MATCH 0}}"
    dir: relayer
    cmds:
      - rly chains add --file ./neutron-{{.TARGET}}.json neutron-{{.TARGET}}
      - rly chains add --file ./stargaze-{{.TARGET}}.json stargaze-{{.TARGET}}
      - rly chains add --file ./kujira-{{.TARGET}}.json kujira-{{.TARGET}}

  relayer-add-wallet-*:
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - rly keys restore neutron-{{.TARGET}} default "{{.RELAYER_SEED_PHRASE}}"
      - rly keys restore stargaze-{{.TARGET}} default "{{.RELAYER_SEED_PHRASE}}"
      - rly keys restore kujira-{{.TARGET}} default "{{.RELAYER_SEED_PHRASE}}"

  relayer-check-wallet-*:
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - rly q balance neutron-{{.TARGET}}
      - rly q balance stargaze-{{.TARGET}}
      - rly q balance kujira-{{.TARGET}}
  
  relayer-create-paths-*:
    vars:
      TARGET: "{{index .MATCH 0}}"
      NEUTRON_CHAIN_ID:
        sh: jq -r '.neutron_{{.TARGET}}.chain_id' network.json
      KUJIRA_CHAIN_ID:
        sh: jq -r '.kujira_{{.TARGET}}.chain_id' network.json
      STARGAZE_CHAIN_ID:
        sh: jq -r '.stargaze_{{.TARGET}}.chain_id' network.json
    cmds:
      - rly paths new {{.KUJIRA_CHAIN_ID}} {{.NEUTRON_CHAIN_ID}} {{.RELAYER_PATH_PREFIX}}-kujira-neutron-{{.TARGET}}
      - rly paths new {{.NEUTRON_CHAIN_ID}} {{.STARGAZE_CHAIN_ID}} {{.RELAYER_PATH_PREFIX}}-neutron-stargaze-{{.TARGET}}
  
  relayer-create-clients-*:
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - rly transact client kujira-{{.TARGET}} neutron-{{.TARGET}} {{.RELAYER_PATH_PREFIX}}-kujira-neutron-{{.TARGET}} --override
      - rly transact client neutron-{{.TARGET}} stargaze-{{.TARGET}} {{.RELAYER_PATH_PREFIX}}-neutron-stargaze-{{.TARGET}} --override
  
  relayer-create-connections-*:
    vars:
      TARGET: "{{index .MATCH 0}}"
    cmds:
      - rly transact connection {{.RELAYER_PATH_PREFIX}}-kujira-neutron-{{.TARGET}} --override
      - rly transact connection {{.RELAYER_PATH_PREFIX}}-neutron-stargaze-{{.TARGET}} --override

  relayer-create-channels-*:
    vars:
        TARGET: "{{index .MATCH 0}}"
        WAREHOUSE_IBC_PORT:
          sh: jq -r '.warehouse_{{.TARGET}}.ibcPort' deploy.json
        PAYMENT_IBC_PORT:
          sh: jq -r '.payment_{{.TARGET}}.ibcPort' deploy.json
        NFT_IBC_PORT:
          sh: jq -r '.nft_{{.TARGET}}.ibcPort' deploy.json
        # This must match the version in the different contracts ibc.rs, but no need to edit it
        WAREHOUSE_PAYMENT_IBC_CHANNEL_VERSION: "warehouse-payment-001"
        WAREHOUSE_NFT_IBC_CHANNEL_VERSION: "warehouse-nft-001"
    cmds: 
      - rly transact channel {{.RELAYER_PATH_PREFIX}}-kujira-neutron-{{.TARGET}} --src-port {{.PAYMENT_IBC_PORT}} --dst-port {{.WAREHOUSE_IBC_PORT}} --order unordered --version {{.WAREHOUSE_PAYMENT_IBC_CHANNEL_VERSION}} --debug --override
      - rly transact channel {{.RELAYER_PATH_PREFIX}}-neutron-stargaze-{{.TARGET}} --src-port {{.WAREHOUSE_IBC_PORT}} --dst-port {{.NFT_IBC_PORT}} --order unordered --version {{.WAREHOUSE_NFT_IBC_CHANNEL_VERSION}} --debug --override
  
  relayer-start-*:
    vars:
        TARGET: "{{index .MATCH 0}}"
    cmds: 
      - echo "Starting relayer for {{.TARGET}}"
    deps: ["internal-relayer-start-path-kujira-neutron-{{.TARGET}}", "internal-relayer-start-path-neutron-stargaze-{{.TARGET}}"]

  internal-relayer-start-path-*:
    internal: true
    vars:
        SUFFIX: "{{index .MATCH 0}}"
    cmds:
      - rly start {{.RELAYER_PATH_PREFIX}}-{{.SUFFIX}} --debug-addr="localhost:0"

  ##### LOCAL CHAINS #####

  create-chains:
    deps: [create-chain-neutron, create-chain-kujira, create-chain-stargaze]

  start-chains:
    deps: [start-chain-neutron, start-chain-kujira, start-chain-stargaze]
  
  stop-chains:
    deps: [stop-chain-neutron, stop-chain-kujira, stop-chain-stargaze]

  delete-chains:
    deps: [delete-chain-neutron, delete-chain-kujira, delete-chain-stargaze]

  create-chain-*:
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      STAKE_DENOM: "ufajita" # doesn't matter for a single local node
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
      FEE_DENOM:
        sh: jq -r '.{{.ID}}_local.denom' network.json
      RPC_PORT:
        sh: jq -r '.{{.ID}}_local.rpc_url' network.json | sed -E 's/.*:([0-9]+).*/\1/' 
      REST_PORT:
        sh: jq -r '.{{.ID}}_local.rest_url' network.json | sed -E 's/.*:([0-9]+).*/\1/' 
      BINARY:
        sh: jq -r '.{{.ID}}_local.binary' network.json
      DOCKER_IMAGE:
        sh: jq -r '.{{.ID}}_local.docker_image' network.json
      TIMEOUT:
        sh: jq -r '.{{.ID}}_local.timeout' network.json
      VOLUME_NAME: "{{.CHAIN_ID}}_data"
      CHAIN_DIR: "./data/{{.CHAIN_ID}}"
      CONFIG_FILE: "{{.CHAIN_DIR}}/config/config.toml"
      APP_FILE: "{{.CHAIN_DIR}}/config/app.toml"
      GENESIS_FILE: "{{.CHAIN_DIR}}/config/genesis.json"
      GENESIS_DENOM_KEYS:
        denom
        mint_denom
        bond_denom
    cmds:
      - task: delete-chain-{{.ID}}
        vars: { 
          CHAIN_ID: "{{.CHAIN_ID}}" 
        }
      - echo "Creating chain {{.CHAIN_ID}}"
      # create the docker instance
      - docker run -d --name {{.CHAIN_ID}} 
        -p {{.RPC_PORT}}:26657 -p {{.REST_PORT}}:1317 
        --mount type=volume,source={{.VOLUME_NAME}},target=/root 
        "{{.DOCKER_IMAGE}}"
        tail -f /dev/null

      # inspiration:
      # https://github.com/neutron-org/neutron/blob/main/network/init.sh
      # https://github.com/CosmWasm/wasmd/blob/main/scripts/contrib/local/setup_wasmd.sh
      # https://github.com/osmosis-labs/localosmosis-archive/blob/main/README.md#pro-tip-speed-up-block-time
      #
      # initialize the chain
      - docker exec {{.CHAIN_ID}} {{.BINARY}} init test --home "{{.CHAIN_DIR}}" --chain-id="{{.CHAIN_ID}}"
      # create accounts
      - docker exec {{.CHAIN_ID}} /bin/sh -c 'echo "{{.VALIDATOR_SEED_PHRASE}}" | {{.BINARY}} keys add validator --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover'
      - docker exec {{.CHAIN_ID}} {{.BINARY}} genesis add-genesis-account validator "100000000000000{{.STAKE_DENOM}},100000000000000{{.FEE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.DEPLOYER_SEED_PHRASE}}" != "{{.VALIDATOR_SEED_PHRASE}}" ]
        then
          echo "{{.DEPLOYER_SEED_PHRASE}}" | {{.BINARY}} keys add deployer --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover
          {{.BINARY}} genesis add-genesis-account deployer "100000000000000{{.STAKE_DENOM}},100000000000000{{.FEE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
        fi'
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.RELAYER_SEED_PHRASE}}" != "{{.VALIDATOR_SEED_PHRASE}}" ] && [ "{{.RELAYER_SEED_PHRASE}}" != "{{.DEPLOYER_SEED_PHRASE}}" ]
        then
          echo "{{.RELAYER_SEED_PHRASE}}" | {{.BINARY}} keys add relayer --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover
          {{.BINARY}} genesis add-genesis-account relayer "100000000000000{{.STAKE_DENOM}},100000000000000{{.FEE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
        fi'
      - |
        docker exec {{.CHAIN_ID}} /bin/sh -c '
        if [ "{{.USER_SEED_PHRASE}}" != "{{.VALIDATOR_SEED_PHRASE}}" ] && [ "{{.USER_SEED_PHRASE}}" != "{{.DEPLOYER_SEED_PHRASE}}" ] && [ "{{.USER_SEED_PHRASE}}" != "{{.RELAYER_SEED_PHRASE}}" ]
        then
          echo "{{.USER_SEED_PHRASE}}" | {{.BINARY}} keys add user --home "{{.CHAIN_DIR}}" --keyring-backend=test --recover
          {{.BINARY}} genesis add-genesis-account user "100000000000000{{.STAKE_DENOM}},100000000000000{{.FEE_DENOM}}" --home "{{.CHAIN_DIR}}" --keyring-backend=test
        fi'
      # submit genesis validator tx
      - docker exec {{.CHAIN_ID}} {{.BINARY}} genesis gentx validator "250000000{{.STAKE_DENOM}}" --chain-id="{{.CHAIN_ID}}" --keyring-backend=test --home "{{.CHAIN_DIR}}"
      # collect genesis txs
      - docker exec {{.CHAIN_ID}} {{.BINARY}} genesis collect-gentxs --home "{{.CHAIN_DIR}}"
      # set the block time to be fast 
      - docker exec {{.CHAIN_ID}} sed -E -i '/timeout_(propose|prevote|precommit|commit)/s/[0-9]+m?s/{{.TIMEOUT}}/' "{{.CONFIG_FILE}}"
      # set the minimum gas prices to 0
      - docker exec {{.CHAIN_ID}} sed -E -i 's/minimum-gas-prices = "[^"]*"/minimum-gas-prices = "0{{.STAKE_DENOM}}"/g' "{{.APP_FILE}}" 
      # enable unsafe cors
      - docker exec {{.CHAIN_ID}} sed -E -i 's/enabled-unsafe-cors *= *false/enabled-unsafe-cors = true/g' "{{.APP_FILE}}" 
      - docker exec {{.CHAIN_ID}} sed -E -i 's/cors_allowed_origins = \[[^]]*\]/cors_allowed_origins = ["*"]/' "{{.CONFIG_FILE}}" 
      # replace url to listen on all ip addresses
      - docker exec {{.CHAIN_ID}} sed -E -i 's/tcp:\/\/[^:]+:/tcp:\/\/0.0.0.0:/g' {{.APP_FILE}}
      - docker exec {{.CHAIN_ID}} sed -E -i 's/tcp:\/\/[^:]+:/tcp:\/\/0.0.0.0:/g' {{.CONFIG_FILE}}
      # replace denom in genesis file
      - for: { var: GENESIS_DENOM_KEYS }
        cmd: |
          docker exec {{.CHAIN_ID}} sed -E -i 's/"{{.ITEM}}"[[:space:]]*:[[:space:]]*"stake"/"{{.ITEM}}": "{{.STAKE_DENOM}}"/g' "{{.GENESIS_FILE}}" 
      # stop the docker instance
      - docker kill {{.CHAIN_ID}}
  
  delete-chain-*:
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
      VOLUME_NAME: "{{.CHAIN_ID}}_data"
    # allow this command to fail
    ignore_error: true  
    cmds:
      - echo "Deleting chain {{.CHAIN_ID}}"
      - docker kill {{.CHAIN_ID}}
      - docker rm {{.CHAIN_ID}}
      - docker volume rm -f {{.VOLUME_NAME}} 

  stop-chain-*:
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
    cmds:
      - docker kill {{.CHAIN_ID}}
  
  start-chain-*:
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
      BINARY:
        sh: jq -r '.{{.ID}}_local.binary' network.json
      CHAIN_DIR: "./data/{{.CHAIN_ID}}"
    cmds:
      - docker restart {{.CHAIN_ID}}
      - docker exec -d {{.CHAIN_ID}} {{.BINARY}} start --home "{{.CHAIN_DIR}}"

  sh-chain-*:
    env: 
      DOCKER_DEFAULT_PLATFORM: linux/amd64
    vars:
      ID: "{{index .MATCH 0}}"
      CHAIN_ID:
        sh: jq -r '.{{.ID}}_local.chain_id' network.json
    cmds:
      - docker exec -it {{.CHAIN_ID}} /bin/sh 